from django.shortcuts import render
from .models import Car

def home(request):
    cars = Car.objects.all().order_by('-id')[:4]  # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 –º–∞—à–∏–Ω—ã
    for car in cars:
        if not car.image:
            car.image = 'default_image.jpg'  # –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    return render(request, 'cars/home.html', {'cars': cars})


# views.py
from django.shortcuts import render
from .models import Car

def car_list(request):
    # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞ –∏–∑ GET-–∑–∞–ø—Ä–æ—Å–∞
    make = request.GET.get('make', '')
    year_min = request.GET.get('year_min', '')
    year_max = request.GET.get('year_max', '')
    price_min = request.GET.get('price_min', '')
    price_max = request.GET.get('price_max', '')
    engine_min = request.GET.get('engine_min', '')
    engine_max = request.GET.get('engine_max', '')

    # –ù–∞—á–∏–Ω–∞–µ–º —Å –±–∞–∑–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∫–æ –≤—Å–µ–º –∞–≤—Ç–æ–º–æ–±–∏–ª—è–º
    cars = Car.objects.all()

    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –º–∞—Ä–∫–µ
    if make:
        cars = cars.filter(make__icontains=make)

    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω—É –≥–æ–¥–∞ –≤—ã–ø—É—Å–∫–∞
    if year_min:
        try:
            year_min = int(year_min)
            cars = cars.filter(year__gte=year_min)
        except ValueError:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –µ—Å–ª–∏ year_min –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º
    if year_max:
        try:
            year_max = int(year_max)
            cars = cars.filter(year__lte=year_max)
        except ValueError:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –µ—Å–ª–∏ year_max –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º

    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω—É —Ü–µ–Ω—ã
    if price_min:
        try:
            price_min = float(price_min)
            cars = cars.filter(price__gte=price_min)
        except ValueError:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –µ—Å–ª–∏ price_min –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º
    if price_max:
        try:
            price_max = float(price_max)
            cars = cars.filter(price__lte=price_max)
        except ValueError:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –µ—Å–ª–∏ price_max –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º

    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω—É –æ–±—ä–µ–º–∞ –¥–≤–∏–≥–∞—Ç–µ–ª—è
    if engine_min:
        try:
            engine_min = float(engine_min)
            cars = cars.filter(engine_size__gte=engine_min)
        except ValueError:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –µ—Å–ª–∏ engine_min –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º
    if engine_max:
        try:
            engine_max = float(engine_max)
            cars = cars.filter(engine_size__lte=engine_max)
        except ValueError:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –µ—Å–ª–∏ engine_max –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º

    return render(request, 'cars/car_list.html', {'cars': cars})
 

from django.db.models import Q
from django.shortcuts import render, get_object_or_404
from .models import Car
from .forms import CarForm
from decimal import Decimal

def add_car(request):
    # üîπ –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
    last_cars = list(Car.objects.order_by('-id')[:5])
    recommended_cars = None
    message = None
    selected_car = None

    # üîπ –ü–æ–ª—É—á–∞–µ–º ID –∏–∑ —Ñ–æ—Ä–º—ã (–≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ –∏–ª–∏ —Ä—É—á–Ω–æ–π –≤–≤–æ–¥)
    car_id = request.GET.get('car_id') or request.GET.get('car_id_manual')

    if car_id:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ ID ‚Äî —á–∏—Å–ª–æ
            car_id = int(car_id)
            selected_car = get_object_or_404(Car, id=car_id)

            # ‚úÖ –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω–∞—è –º–∞—à–∏–Ω–∞ –Ω–µ –≤ —Å–ø–∏—Å–∫–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º –µ—ë –≤ –∫–æ–Ω–µ—Ü
            if selected_car not in last_cars:
                last_cars.append(selected_car)

            # üîπ –ü–æ–¥–±–æ—Ä –ø–æ—Ö–æ–∂–∏—Ö –º–∞—à–∏–Ω –ø–æ —Ü–µ–Ω–µ ¬±10% –∏ —Ü–≤–µ—Ç—É/–º–∞—Ä–∫–µ
            price_min = selected_car.price * Decimal('0.9')
            price_max = selected_car.price * Decimal('1.1')

            recommended_cars = Car.objects.filter(
                Q(make=selected_car.make) | Q(color=selected_car.color),
                price__gte=price_min,
                price__lte=price_max
            ).exclude(id=selected_car.id)[:5]

        except ValueError:
            message = f"‚ùå –í–≤–µ–¥—ë–Ω–Ω—ã–π ID ¬´{car_id}¬ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º."
        except Car.DoesNotExist:
            message = f"‚ùå –ú–∞—à–∏–Ω–∞ —Å ID {car_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."

    # üîπ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
    if request.method == 'POST':
        form = CarForm(request.POST, request.FILES)
        if form.is_valid():
            new_car = form.save()
            message = f"‚úÖ –ê–≤—Ç–æ–º–æ–±–∏–ª—å {new_car.make} {new_car.model} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!"
            return render(request, 'cars/add_car.html', {
                'form': CarForm(),
                'last_cars': last_cars,
                'message': message,
                'selected_car': new_car,
            })
    else:
        form = CarForm()

    # üîπ –†–µ–Ω–¥–µ—Ä —à–∞–±–ª–æ–Ω–∞
    return render(request, 'cars/add_car.html', {
        'form': form,
        'last_cars': last_cars,
        'recommended_cars': recommended_cars,
        'selected_car': selected_car,
        'message': message,
    })





from django.shortcuts import render, get_object_or_404
from .models import Car
from .forms import CarForm
from django.http import HttpResponse

def credit_calculator(request):
    return render(request, 'cars/credit_calculator.html')  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—É—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
from django.shortcuts import render

def about(request):
    return render(request, 'cars/about.html')
def contact(request):
    return render(request, 'cars/contact.html')  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—É—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π

from django.shortcuts import render
from .models import Car
from django.shortcuts import render
from .models import Car


from django.shortcuts import render, get_object_or_404
from .models import Car  # –∏–ª–∏ –≤–∞—à–∞ –º–æ–¥–µ–ª—å –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
from .utils import calculate_maintenance_costs  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤


def car_detail(request, car_id):
    car = get_object_or_404(Car, pk=car_id)
    
    testdriverequest = TestDriveRequest.objects.filter(
        car=car,
        reservation_cancelled=False
    ).order_by('-reservation_made_at').first()

    costs = None
    message = None
    test_drive_price = None

    if testdriverequest:
        expired = testdriverequest.check_reservation_expiration()
        if expired:
            message = "–ë—Ä–æ–Ω—å –Ω–∞ —Ç–µ—Å—Ç-–¥—Ä–∞–π–≤ —Å–Ω—è—Ç–∞. –ú–∞—à–∏–Ω–∞ —Å–Ω–æ–≤–∞ –¥–æ—Å—Ç—É–ø–Ω–∞."
        elif testdriverequest.reservation_cancelled:
            message = "–ë—Ä–æ–Ω—å –Ω–∞ —Ç–µ—Å—Ç-–¥—Ä–∞–π–≤ —É–∂–µ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞."
        test_drive_price = testdriverequest.test_drive_price
    else:
        # –ï—Å–ª–∏ —Ç–µ—Å—Ç-–¥—Ä–∞–π–≤–æ–≤ –Ω–µ—Ç, —Å—á–∏—Ç–∞–µ–º —Ü–µ–Ω—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–∞—à–∏–Ω—ã
        test_drive_price = 5000 + (car.engine_size * 1000)

    if request.method == 'POST':
        fuel_consumption = float(request.POST.get('fuel_consumption'))
        fuel_price = float(request.POST.get('fuel_price'))
        distance_per_year = int(request.POST.get('distance_per_year'))
        tax_rate = car.engine_size * 10
        insurance_rate = car.engine_size * 20

        costs = calculate_maintenance_costs(
            fuel_consumption, fuel_price, distance_per_year, tax_rate, insurance_rate
        )

    return render(
        request,
        'cars/car_detail.html',
        {
            'car': car,
            'costs': costs,
            'testdriverequest': testdriverequest,
            'message': message,
            'test_drive_price': test_drive_price,
        }
    )

from django.contrib import messages



def credit_calculator(request):
    return render(request, 'cars/credit_calculator.html')


from django.shortcuts import render, get_object_or_404, redirect
from .models import Car, TestDriveRequest
from django.http import HttpResponse

from django.shortcuts import render, get_object_or_404
from django.http import HttpResponseRedirect
from django.urls import reverse
from .models import Car, TestDriveRequest

from django.shortcuts import render, get_object_or_404
from django.http import HttpResponseRedirect
from django.urls import reverse
from .models import Car, TestDriveRequest

from django.shortcuts import get_object_or_404, render
from django.http import HttpResponseRedirect
from django.urls import reverse
from .models import Car
from .services import book_test_drive  # üìå “ö–æ—Å—É–¥—ã “±–º—ã—Ç–ø–∞“£—ã–∑!

def test_drive(request, car_id):
    car = get_object_or_404(Car, id=car_id)

    if request.method == 'POST':
        name = request.POST.get('name')
        email = request.POST.get('email')
        phone = request.POST.get('phone')
        date = request.POST.get('date')

        # üì¢ book_test_drive –∞—Ä“õ—ã–ª—ã –±—Ä–æ–Ω–¥–∞—É
        try:
            book_test_drive(car_id, name, email, phone, date)
        except Exception as e:
            # –ú–∞—à–∏–Ω–∞ “õ–æ–ª–∂–µ—Ç—ñ–º–¥—ñ –±–æ–ª–º–∞—Å–∞ –Ω–µ–º–µ—Å–µ –±–∞—Å“õ–∞ “õ–∞—Ç–µ –±–æ–ª—Å–∞
            return render(request, 'cars/test_drive.html', {
                'car': car,
                'error': str(e)
            })

        return HttpResponseRedirect(reverse('test_drive', args=[car_id]) + '?success=1')

    # –ï–≥–µ—Ä URL-–¥–∞ success=1 –±–æ–ª—Å–∞, –æ–Ω–¥–∞ —Å”ô—Ç—Ç—ñ —Ö–∞–±–∞—Ä–ª–∞–º–∞–Ω—ã –∫”©—Ä—Å–µ—Ç–µ–º—ñ–∑
    success = request.GET.get('success') == '1'

    return render(request, 'cars/test_drive.html', {
        'car': car,
        'success': success
    })



# cars/views.py
from django.shortcuts import render
from .utils import calculate_maintenance_costs, compare_cars
from .models import Car

def maintenance_cost_view(request):
    if request.method == "POST":
        fuel_consumption = float(request.POST['fuel_consumption'])
        fuel_price = float(request.POST['fuel_price'])
        distance_per_year = float(request.POST['distance_per_year'])
        tax_rate = float(request.POST['tax_rate'])
        insurance_rate = float(request.POST['insurance_rate'])
        costs = calculate_maintenance_costs(fuel_consumption, fuel_price, distance_per_year, tax_rate, insurance_rate)
        return render(request, 'cars/maintenance_result.html', {'costs': costs})
    return render(request, 'cars/maintenance_calculator.html')

def car_comparison_view(request):
    selected_car_ids = request.POST.getlist('selected_cars')
    cars = Car.objects.filter(id__in=selected_car_ids)
    comparison_table = compare_cars(cars)  # ‚ö†Ô∏è –í–ê–ñ–ù–û: —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è?
    return render(request, 'cars/car_comparison.html', {'comparison_table': comparison_table, 'cars': cars})


from django.shortcuts import render
from .utils import calculate_maintenance_costs  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤

def maintenance_cost_view(request, car_id):
    car = Car.objects.get(id=car_id)  # –ü–æ–ª—É—á–∞–µ–º –º–∞—à–∏–Ω—É –ø–æ ID, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
    costs = None

    if request.method == "POST":
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–æ—Ä–º—ã
        fuel_consumption = float(request.POST.get('fuel_consumption'))
        fuel_price = float(request.POST.get('fuel_price'))
        distance_per_year = int(request.POST.get('distance_per_year'))

        # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞—Å—á–µ—Ç
        costs = calculate_maintenance_costs(fuel_consumption, fuel_price, distance_per_year, car.tax_rate, car.insurance_rate)

    return render(request, 'cars/maintenance_result.html', {'costs': costs})


from django.shortcuts import render
from django.http import JsonResponse
from .ml_model import predict_price, model





import pickle
import os
import numpy as np
from django.shortcuts import render
from .forms import CarPriceForm

# –ü—É—Ç—å –∫ –º–æ–¥–µ–ª—è–º
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
MODEL_PATH = os.path.join(BASE_DIR, "car_price_model.pkl")
PREPROCESSOR_PATH = os.path.join(BASE_DIR, "preprocessor.pkl")

# –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
with open(MODEL_PATH, "rb") as f:
    model = pickle.load(f)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
with open(PREPROCESSOR_PATH, "rb") as f:
    preprocessor = pickle.load(f)

def predict_price(request):
    predicted_price = None

    if request.method == "POST":
        form = CarPriceForm(request.POST)
        if form.is_valid():
            data = [
                form.cleaned_data["year"],
                form.cleaned_data["mileage"],
                form.cleaned_data["engine_size"],
                form.cleaned_data["brand"],
                form.cleaned_data["model"],
                form.cleaned_data["body_type"],
                form.cleaned_data["transmission"],
                form.cleaned_data["drive"],
                form.cleaned_data["color"],
                form.cleaned_data["wheel"],
                form.cleaned_data["engine_type"],
            ]

            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ DataFrame
            import pandas as pd
            columns = ['–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞', '–ü—Ä–æ–±–µ–≥', '–û–±—ä–µ–º –¥–≤–∏–≥–∞—Ç–µ–ª—è, –ª (—á–∏—Å–ª–æ)',
                       '–ú–∞—Ä–∫–∞', '–ú–æ–¥–µ–ª—å', '–ö—É–∑–æ–≤', '–ö–æ—Ä–æ–±–∫–∞ –ø–µ—Ä–µ–¥–∞—á',
                       '–ü—Ä–∏–≤–æ–¥', '–¶–≤–µ—Ç', '–†—É–ª—å', '–û–±—ä–µ–º –¥–≤–∏–≥–∞—Ç–µ–ª—è, –ª (—Ç–∏–ø)']
            input_df = pd.DataFrame([data], columns=columns)

            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å –ø–æ–º–æ—â—å—é preprocessor
            X_input = preprocessor.transform(input_df)

            # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
            y_pred_log = model.predict(X_input)
            predicted_price = np.expm1(y_pred_log)[0]  # –û–±—Ä–∞—Ç–Ω–æ–µ –ª–æ–≥–∞—Ä–∏—Ñ–º–∏—Ä–æ–≤–∞–Ω–∏–µ

    else:
        form = CarPriceForm()

    return render(request, "cars/predict_form.html", {"form": form, "predicted_price": predicted_price})
